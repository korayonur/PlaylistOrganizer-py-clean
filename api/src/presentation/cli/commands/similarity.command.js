const { formatSuccess, formatError, formatInfo, formatTable } = require('../utils/output');

/**
 * Similarity (Fix √ñnerileri) CLI Komutlarƒ±
 */

async function similaritySuggestionsCommand(options) {
    try {
        console.log(formatInfo('üîß Fix √∂nerileri alƒ±nƒ±yor...'));

        const { DatabaseManager } = require('../../../infrastructure/persistence/DatabaseManager');
        const WordIndexService = require('../../../application/services/WordIndexService');
        const SimilarityService = require('../../../application/services/SimilarityService');

        // Database'i ba≈ülat
        const dbManager = new DatabaseManager();
        await dbManager.initialize();

        // Servisleri ba≈ülat
        const db = dbManager.getDatabase();
        const wordIndexService = new WordIndexService(db);
        const similarityService = new SimilarityService(db, wordIndexService);

        // √ñnerileri al - parseInt ile number'a √ßevir
        const limit = options.limit ? parseInt(options.limit) : null;
        const offset = parseInt(options.offset) || 0;
        const type = options.type; // exact/high/medium/low

        const result = await similarityService.generateSuggestions({
            limit,
            offset,
            type
        });

        if (result.suggestions.length === 0) {
            console.log(formatInfo('‚ÑπÔ∏è  Hi√ß fix √∂nerisi bulunamadƒ±'));
            return;
        }

        console.log(formatSuccess(`\n‚úÖ ${result.total} √∂neri bulundu (${result.count} g√∂steriliyor)`));
        console.log(formatInfo(`üìä Stats: Exact: ${result.stats.exact}, High: ${result.stats.high}, Medium: ${result.stats.medium}, Low: ${result.stats.low}`));

        // Tabloyu hazƒ±rla
        const tableHeaders = ['#', 'Track', 'Music File', 'Type', 'Score', 'Words'];
        const tableRows = result.suggestions.map((s, index) => [
            (index + 1).toString(),
            s.track_fileName.substring(0, 50),
            s.music_file_name.substring(0, 50),
            s.match_type,
            s.similarity_score.toFixed(2),
            s.matched_words.toString()
        ]);

        console.log('\n' + formatTable([tableHeaders, ...tableRows]));

    } catch (error) {
        console.log(formatError(`‚ùå Fix √∂nerileri hatasƒ±: ${error.message}`));
        console.error(error);
        process.exit(1);
    }
}

async function similarityStatisticsCommand() {
    try {
        console.log(formatInfo('üìä Similarity istatistikleri alƒ±nƒ±yor...'));

        const { DatabaseManager } = require('../../../infrastructure/persistence/DatabaseManager');
        const WordIndexService = require('../../../application/services/WordIndexService');
        const SimilarityService = require('../../../application/services/SimilarityService');

        // Database'i ba≈ülat
        const dbManager = new DatabaseManager();
        await dbManager.initialize();

        // Servisleri ba≈ülat
        const wordIndexService = new WordIndexService(dbManager.db);
        const similarityService = new SimilarityService(dbManager.db, wordIndexService);

        // ƒ∞statistikleri al
        const stats = similarityService.getStatistics();

        console.log(formatSuccess('\n‚úÖ ƒ∞statistikler:'));
        console.log(formatInfo(`\nüìä Track ƒ∞statistikleri:`));
        console.log(formatInfo(`   Toplam Tracks: ${stats.total_tracks}`));
        console.log(formatInfo(`   E≈üle≈üen Tracks: ${stats.matched_tracks}`));
        console.log(formatInfo(`   E≈üle≈ümemi≈ü Tracks: ${stats.unmatched_tracks}`));
        
        console.log(formatInfo(`\nüéµ Playlist ƒ∞statistikleri:`));
        console.log(formatInfo(`   Toplam Playlists: ${stats.total_playlists}`));
        
        if (stats.playlist_types.length > 0) {
            console.log(formatInfo(`\nüìÅ Playlist Tipleri:`));
            stats.playlist_types.forEach(pt => {
                console.log(formatInfo(`   ${pt.type}: ${pt.count}`));
            });
        }

        if (stats.top_playlists.length > 0) {
            console.log(formatInfo(`\nüîù En √áok Track'e Sahip Playlists:`));
            stats.top_playlists.forEach(p => {
                console.log(formatInfo(`   ${p.name}: ${p.track_count} track`));
            });
        }

    } catch (error) {
        console.log(formatError(`‚ùå ƒ∞statistik hatasƒ±: ${error.message}`));
        console.error(error);
        process.exit(1);
    }
}

async function similarityUnmatchedCommand(options) {
    try {
        console.log(formatInfo('üìã E≈üle≈ümemi≈ü tracklar alƒ±nƒ±yor...'));

        const { DatabaseManager } = require('../../../infrastructure/persistence/DatabaseManager');
        const WordIndexService = require('../../../application/services/WordIndexService');
        const SimilarityService = require('../../../application/services/SimilarityService');

        // Database'i ba≈ülat
        const dbManager = new DatabaseManager();
        await dbManager.initialize();

        // Servisleri ba≈ülat
        const wordIndexService = new WordIndexService(dbManager.db);
        const similarityService = new SimilarityService(dbManager.db, wordIndexService);

        // E≈üle≈ümemi≈ü tracklarƒ± al
        const limit = options.limit || 20;
        const tracks = similarityService.getUnmatchedTracks(limit);

        if (tracks.length === 0) {
            console.log(formatSuccess('‚úÖ T√ºm tracklar e≈üle≈ümi≈ü!'));
            return;
        }

        console.log(formatInfo(`\nüìã ${tracks.length} e≈üle≈ümemi≈ü track bulundu:`));

        // Tabloyu hazƒ±rla
        const tableHeaders = ['#', 'File Name', 'Playlists', 'Source'];
        const tableRows = tracks.map((t, index) => [
            (index + 1).toString(),
            t.fileName.substring(0, 60),
            (t.playlist_count || 0).toString(),
            t.track_source || 'unknown'
        ]);

        console.log('\n' + formatTable([tableHeaders, ...tableRows]));

    } catch (error) {
        console.log(formatError(`‚ùå E≈üle≈ümemi≈ü track hatasƒ±: ${error.message}`));
        console.error(error);
        process.exit(1);
    }
}

module.exports = {
    similaritySuggestionsCommand,
    similarityStatisticsCommand,
    similarityUnmatchedCommand
};


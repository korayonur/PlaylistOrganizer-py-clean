---
description: PlaylistOrganizer Avalonia projesi için OpenSpec uyumlu kurallar
globs: ["**/*.cs", "**/*.axaml", "**/*.md", "**/*.json", "**/*.sh"]
alwaysApply: true
---

# CURSOR RULES - PlaylistOrganizer Avalonia (OpenSpec Uyumlu)

## OPENSPEC WORKFLOW KURALLARI
- Her değişiklik için önce proposal oluştur (openspec/changes/)
- Spec'leri güncelle (openspec/specs/)
- Task'ları tanımla ve takip et (tasks.md)
- Implementation'dan önce onay al
- Tamamlanan değişiklikleri archive et
- OpenSpec workflow'u zorunlu kullan

## AVALONIA UI GELİŞTİRME KURALLARI
- Avalonia UI framework kullan
- Cross-platform hedef (macOS, Windows, Linux)
- MVVM pattern zorunlu
- Data binding kullan
- Async/await pattern kullan
- Avalonia UI best practices uygula
- XAML ile UI tanımlama
- Value converter'lar kullan

## CLEAN ARCHITECTURE KURALLARI (ZORUNLU)
- **Interface'ler zorunlu**: Her service için interface oluştur
- **Dependency Injection zorunlu**: Constructor injection kullan
- **Repository Pattern zorunlu**: Veri erişimi için repository kullan
- **Separation of Concerns**: Her katman kendi sorumluluğuna odaklanmalı
- **Dependency Direction**: Dış katmanlar → İç katmanlara bağımlı olabilir
- **Business Logic**: UI'dan bağımsız olmalı
- **Testability**: Mock'lanabilir interface'ler kullan

## AVALONIA MİMARİ KURALLARI
- Clean Architecture prensipleri
- View'ları küçük ve yeniden kullanılabilir tut
- ViewModel'lerde iş mantığı
- Model'lerde veri yapıları
- Service'lerde harici işlemler
- Dependency injection kullan
- Repository pattern uygula

## GIT WORKFLOW KURALLARI
- Feature branch kullan (feature/avalonia-development)
- Açıklayıcı commit mesajları yaz
- Pull request'ler zorunlu
- Code review yap
- Commit'leri küçük ve anlamlı tut

## TEST KURALLARI (ZORUNLU)
- **TDD ZORUNLU**: Test'leri önce yaz, sonra implement et
- **Unit test coverage %80+ ZORUNLU**
- **Her adımda test çalıştır ZORUNLU**
- **Test başarısız olursa dur ZORUNLU**
- Mock'ları kullan
- Integration test'ler zorunlu
- UI test'ler zorunlu
- Performance test'ler zorunlu
- Test automation zorunlu
- Test coverage monitoring zorunlu
- Test başarısızken merge etme YASAK
- Test olmadan kod yazma YASAK

## HATA LOGLAMA KURALLARI
- Hata durumunda önce log'ları kontrol et:
  1. Console log'u
  2. Error log dosyaları
  3. API response error details
  4. Database connection status
- Hata çözümü için log analizi zorunlu
- Console logları dahil her şeyi logla
- C# exception handling kullan

## TERMINAL KOMUT KURALLARI
- Terminal komutlarında karmaşık echo ifadeleri kullanma
- Basit, tek amaçlı komutlar tercih et
- Echo yerine printf veya doğrudan komut çıktısı kullan

## KLASÖR KONTROL KURALLARI
- Bir komut çalıştırmadan önce, bir dosya oluşturmadan önce, bir paket kurulum yapmadan önce doğru klasörde olduğunu mutlaka kontrol et
- Çünkü projede bir çok klasör ve proje yapısı var (PlaylistOrganizerAvalonia, docs, openspec)
- Klasör kontrol yapmadan kurarsan yanlışlıkla ana klasör yada alakasız yerlere işlem yaparsın bu çok tehlikeli

## DOSYA GÜVENLİK KURALLARI
- Silme işlemlerinde önce mv komutu ile .trash/ klasörüne taşı
- rm kullanmadan önce kullanıcı onayı al ve hangi dosyaların silineceğini bildir

## DİL KURALLARI
- Always respond in Türkçe
- Kod yorumları Türkçe olabilir
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Git commit mesajları Türkçe olabilir

## SORUN ÇÖZME METODOLOJİSİ
- Olasılık üzerinden ilerleme YASAK
- OpenSpec workflow uygula
- C# exception handling kullan
- Console logları dahil her şeyi logla
- Hata loglama sistemini düzelt ve dosyaya yazma ekle
- Kök sebepten çöz, olasılık üzerinden değil

## IMPORT İŞLEMLERİ KURALLARI
- VirtualDJ klasörü ile import testleri yap
- Müzik dosyalarını import et
- Avalonia UI ile native file picker kullan
- Gerçek klasör ile test yap

## KOD TEMİZLİK KURALLARI
- Gereksiz kodları temizle
- Eski sistemden kalma kodları kaldır
- Modüler yapıyı koru
- OpenSpec workflow'u uygula

## CURSOR IDE AKTİF KONTROL
Bu dosya Cursor IDE'de aktif mi? Test: Sat Oct 25 12:47:00 +03 2025
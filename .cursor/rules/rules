# CURSOR RULES - PlaylistOrganizer SwiftUI (OpenSpec Uyumlu)

## OPENSPEC WORKFLOW KURALLARI
- Her değişiklik için önce proposal oluştur (openspec/changes/)
- Spec'leri güncelle (openspec/specs/)
- Task'ları tanımla ve takip et (tasks.md)
- Implementation'dan önce onay al
- Tamamlanan değişiklikleri archive et
- OpenSpec workflow'u zorunlu kullan

## SWIFTUI GELİŞTİRME KURALLARI
- SwiftUI framework kullan
- macOS 13.0+ hedef platform (macOS 26.0 SDK)
- MVVM pattern zorunlu
- @StateObject ve @ObservedObject kullan
- Combine framework ile reactive programming
- Async/await pattern kullan
- SwiftUI best practices uygula
- SwiftUI preview'ları aktif kullan
- Protocol-oriented programming uygula

## SWIFTUI MİMARİ KURALLARI
- View'ları küçük ve yeniden kullanılabilir tut
- ViewModel'lerde iş mantığı
- Model'lerde veri yapıları
- Service'lerde harici işlemler
- Protocol-oriented programming
- Dependency injection kullan

## GIT WORKFLOW KURALLARI
- Feature branch kullan (feature/swiftui-development)
- Açıklayıcı commit mesajları yaz
- Pull request'ler zorunlu
- Code review yap
- Commit'leri küçük ve anlamlı tut

## TEST KURALLARI (ZORUNLU)
- **TDD ZORUNLU**: Test'leri önce yaz, sonra implement et
- **Unit test coverage %80+ ZORUNLU**
- **Her adımda test çalıştır ZORUNLU**
- **Test başarısız olursa dur ZORUNLU**
- SwiftUI preview'ları kullan
- Mock'ları kullan
- Integration test'ler zorunlu
- UI test'ler zorunlu
- Performance test'ler zorunlu
- Test automation zorunlu
- Test coverage monitoring zorunlu
- Test başarısızken merge etme YASAK
- Test olmadan kod yazma YASAK

## HATA LOGLAMA KURALLARI
- Hata durumunda önce log'ları kontrol et:
  1. Xcode console log'u
  2. Swift error messages
  3. Build error details
  4. Runtime error logs
- Hata çözümü için log analizi zorunlu
- Console logları dahil her şeyi logla
- Swift error handling kullan

## TERMINAL KOMUT KURALLARI
- Terminal komutlarında karmaşık echo ifadeleri kullanma
- Basit, tek amaçlı komutlar tercih et
- Echo yerine printf veya doğrudan komut çıktısı kullan

## KLASÖR KONTROL KURALLARI
- Bir komut çalıştırmadan önce, bir dosya oluşturmadan önce, bir paket kurulum yapmadan önce doğru klasörde olduğunu mutlaka kontrol et
- Çünkü projede bir çok klasör ve proje yapısı var (swiftui, docs, openspec)
- Klasör kontrol yapmadan kurarsan yanlışlıkla ana klasör yada alakasız yerlere işlem yaparsın bu çok tehlikeli

## DOSYA GÜVENLİK KURALLARI
- Silme işlemlerinde önce mv komutu ile .trash/ klasörüne taşı
- rm kullanmadan önce kullanıcı onayı al ve hangi dosyaların silineceğini bildir

## DİL KURALLARI
- Always respond in Türkçe
- Kod yorumları Türkçe olabilir
- Değişken ve fonksiyon isimleri İngilizce olmalı
- Git commit mesajları Türkçe olabilir

## SORUN ÇÖZME METODOLOJİSİ
- Olasılık üzerinden ilerleme YASAK
- OpenSpec workflow uygula
- Swift error handling kullan
- Console logları dahil her şeyi logla
- Hata loglama sistemini düzelt ve dosyaya yazma ekle
- Kök sebepten çöz, olasılık üzerinden değil

## IMPORT İŞLEMLERİ KURALLARI
- VirtualDJ klasörü ile import testleri yap
- Müzik dosyalarını import et
- SwiftUI ile native file picker kullan
- Gerçek klasör ile test yap

## KOD TEMİZLİK KURALLARI
- Gereksiz kodları temizle
- Eski sistemden kalma kodları kaldır
- Modüler yapıyı koru
- OpenSpec workflow'u uygula
# Cursor IDE Rules Test
## CURSOR IDE AKTİF KONTROL
Bu dosya Cursor IDE'de aktif mi? Test: Wed Oct 22 16:34:08 +03 2025
## CURSOR IDE RULES TEST - Wed Oct 22 16:34:10 +03 2025
## CURSOR IDE RULES TEST - Wed Oct 22 16:34:14 +03 2025

/**
 * D√úZELTƒ∞LMƒ∞≈û M√úKEMMEL ALGORƒ∞TMA TESTƒ∞
 * "Sarƒ± Sarƒ±" problemi i√ßin √∂zel test
 */

const PerfectSimilarityAlgorithm = require('./perfect_similarity_algorithm.js');

async function testFixedAlgorithm() {
    console.log('üîß D√úZELTƒ∞LMƒ∞≈û M√úKEMMEL ALGORƒ∞TMA TESTƒ∞');
    console.log('='.repeat(60));
    
    const algorithm = new PerfectSimilarityAlgorithm();
    
    // Test case: Mahsun Kƒ±rmƒ±zƒ±g√ºl - Sarƒ± Sarƒ±
    const testPath = '/Users/koray/Music/KorayMusics/Video2019/Mahsun Kƒ±rmƒ±zƒ±g√ºl - Sarƒ± Sarƒ±.m4a';
    
    console.log(`\nüéµ Test: ${testPath}`);
    console.log('‚îÄ'.repeat(60));
    
    try {
        const result = await algorithm.searchPerfectMatch(testPath, { 
            threshold: 0.01, 
            limit: 10 
        });
        
        if (result.found && result.matches.length > 0) {
            console.log(`‚úÖ BULUNDU: ${result.matches.length} e≈üle≈üme`);
            console.log('\nüìä SONU√áLAR:');
            
            result.matches.forEach((match, index) => {
                const fileName = match.name.replace(/\.[^/.]+$/, ''); // Uzantƒ±yƒ± kaldƒ±r
                console.log(`   ${index + 1}. ${match.similarity.toFixed(4)} - ${fileName}`);
                console.log(`      üìÅ ${match.path}`);
                
                if (match.matchDetails) {
                    console.log(`      üìä E:${match.matchDetails.exactScore?.toFixed(3) || 'N/A'} F:${match.matchDetails.fuzzyScore?.toFixed(3) || 'N/A'} P:${match.matchDetails.parenthesesScore?.toFixed(3) || 'N/A'}`);
                }
            });
            
            // En iyi e≈üle≈ümeyi kontrol et
            const topMatch = result.matches[0];
            const topFileName = topMatch.name.replace(/\.[^/.]+$/, '');
            
            console.log(`\nüèÜ EN ƒ∞Yƒ∞ E≈ûLE≈ûME: ${topFileName}`);
            console.log(`   Skor: ${topMatch.similarity.toFixed(4)}`);
            
            // "Sarƒ± Sarƒ±" i√ßeren dosyalarƒ± kontrol et
            const sarƒ±Sarƒ±Matches = result.matches.filter(match => 
                match.name.toLowerCase().includes('sarƒ±') || 
                match.name.toLowerCase().includes('sari')
            );
            
            if (sarƒ±Sarƒ±Matches.length > 0) {
                console.log(`\nüéØ "SARI SARI" ƒ∞√áEREN DOSYALAR:`);
                sarƒ±Sarƒ±Matches.forEach((match, index) => {
                    const fileName = match.name.replace(/\.[^/.]+$/, '');
                    console.log(`   ${index + 1}. ${match.similarity.toFixed(4)} - ${fileName}`);
                });
            } else {
                console.log(`\n‚ùå "SARI SARI" ƒ∞√áEREN DOSYA BULUNAMADI!`);
            }
            
        } else {
            console.log('‚ùå BULUNAMADI');
        }
        
    } catch (error) {
        console.error('‚ùå HATA:', error.message);
    }
}

// Test √ßalƒ±≈ütƒ±r
testFixedAlgorithm();

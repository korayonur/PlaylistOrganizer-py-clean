#!/usr/bin/env node
'use strict';

/**
 * Populate Playlist Tracks Migration Script
 * 
 * Bu script mevcut playlists tablosundaki kayƒ±tlarƒ± kullanarak
 * playlist_tracks tablosunu doldurur.
 */

const { getDatabase } = require('./shared/database');
const importService = require('./modules/import/import-service');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë   PLAYLIST-TRACKS MIGRATION SCRIPT                        ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('');

async function populatePlaylistTracks() {
    try {
        const db = getDatabase().getDatabase();
        
        // Mevcut durum
        const stats = {
            playlists: db.prepare('SELECT COUNT(*) as count FROM playlists').get().count,
            tracks: db.prepare('SELECT COUNT(*) as count FROM tracks').get().count,
            playlistTracksBefore: db.prepare('SELECT COUNT(*) as count FROM playlist_tracks').get().count
        };
        
        console.log('üìä Ba≈ülangƒ±√ß Durumu:');
        console.log(`   - Playlists: ${stats.playlists}`);
        console.log(`   - Tracks: ${stats.tracks}`);
        console.log(`   - Playlist_tracks: ${stats.playlistTracksBefore}`);
        console.log('');
        
        if (stats.playlistTracksBefore > 0) {
            console.log('‚ö†Ô∏è  UYARI: playlist_tracks tablosu zaten dolu!');
            console.log('   Devam etmek i√ßin playlist_tracks tablosunu temizliyorum...');
            db.prepare('DELETE FROM playlist_tracks').run();
            console.log('‚úÖ playlist_tracks tablosu temizlendi');
            console.log('');
        }
        
        // T√ºm playlist'leri al
        const playlists = db.prepare(`
            SELECT id, path, name, type 
            FROM playlists 
            ORDER BY id
        `).all();
        
        console.log(`üîÑ ${playlists.length} playlist i≈üleniyor...`);
        console.log('');
        
        let totalLinkedTracks = 0;
        let successCount = 0;
        let errorCount = 0;
        const startTime = Date.now();
        
        // Her playlist i√ßin
        for (let i = 0; i < playlists.length; i++) {
            const playlist = playlists[i];
            const progress = Math.round(((i + 1) / playlists.length) * 100);
            
            try {
                // Progress g√∂ster (her 100 playlist'te bir)
                if (i % 100 === 0 || i === playlists.length - 1) {
                    process.stdout.write(`\rüìà ƒ∞lerleme: ${i + 1}/${playlists.length} (%${progress}) - ${totalLinkedTracks} track ili≈ükilendirildi`);
                }
                
                // Playlist dosyasƒ±nƒ± parse et
                const playlistTracks = importService.parsePlaylistFile(playlist.path);
                
                // Track'leri kaydet
                const linkedCount = importService.savePlaylistTracks(playlist.id, playlistTracks);
                
                totalLinkedTracks += linkedCount;
                successCount++;
                
            } catch (error) {
                errorCount++;
                if (errorCount <= 10) {  // ƒ∞lk 10 hatayƒ± g√∂ster
                    console.log('');
                    console.error(`‚ùå Hata: ${playlist.path} - ${error.message}`);
                }
            }
        }
        
        console.log('');
        console.log('');
        
        // Sonu√ß istatistikleri
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        const playlistTracksAfter = db.prepare('SELECT COUNT(*) as count FROM playlist_tracks').get().count;
        
        console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë   MIGRATION TAMAMLANDI                                    ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        console.log('');
        console.log('üìä Sonu√ß ƒ∞statistikleri:');
        console.log(`   ‚úÖ Ba≈üarƒ±lƒ± playlist: ${successCount}/${playlists.length}`);
        console.log(`   ‚ùå Hatalƒ± playlist: ${errorCount}/${playlists.length}`);
        console.log(`   üîó Toplam ili≈ükilendirme: ${playlistTracksAfter}`);
        console.log(`   ‚è±Ô∏è  S√ºre: ${duration} saniye`);
        console.log('');
        
        // Doƒürulama
        console.log('üîç Doƒürulama:');
        const verification = db.prepare(`
            SELECT 
                p.id,
                p.name,
                COUNT(pt.track_id) as track_count
            FROM playlists p
            LEFT JOIN playlist_tracks pt ON p.id = pt.playlist_id
            GROUP BY p.id
            HAVING track_count > 0
            ORDER BY track_count DESC
            LIMIT 5
        `).all();
        
        console.log('   En √ßok track i√ßeren 5 playlist:');
        verification.forEach((p, index) => {
            console.log(`   ${index + 1}. ${p.name}: ${p.track_count} track`);
        });
        console.log('');
        
        process.exit(0);
        
    } catch (error) {
        console.error('');
        console.error('üí• Kritik hata:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

// Script'i √ßalƒ±≈ütƒ±r
populatePlaylistTracks();


